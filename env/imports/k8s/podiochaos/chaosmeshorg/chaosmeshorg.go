// chaos-meshorg
package chaosmeshorg

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/smartcontractkit/chainlink-env/imports/k8s/podiochaos/chaosmeshorg/jsii"

	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"
	"github.com/smartcontractkit/chainlink-env/imports/k8s/podiochaos/chaosmeshorg/internal"
)

// PodIOChaos is the Schema for the podiochaos API.
type PodIoChaos interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for PodIoChaos
type jsiiProxy_PodIoChaos struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_PodIoChaos) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodIoChaos) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodIoChaos) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodIoChaos) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodIoChaos) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodIoChaos) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodIoChaos) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Defines a "PodIOChaos" API object.
func NewPodIoChaos(scope constructs.Construct, id *string, props *PodIoChaosProps) PodIoChaos {
	_init_.Initialize()

	j := jsiiProxy_PodIoChaos{}

	_jsii_.Create(
		"chaos-meshorg.PodIoChaos",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Defines a "PodIOChaos" API object.
func NewPodIoChaos_Override(p PodIoChaos, scope constructs.Construct, id *string, props *PodIoChaosProps) {
	_init_.Initialize()

	_jsii_.Create(
		"chaos-meshorg.PodIoChaos",
		[]interface{}{scope, id, props},
		p,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func PodIoChaos_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"chaos-meshorg.PodIoChaos",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Renders a Kubernetes manifest for "PodIOChaos".
//
// This can be used to inline resource manifests inside other objects (e.g. as templates).
func PodIoChaos_Manifest(props *PodIoChaosProps) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"chaos-meshorg.PodIoChaos",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func PodIoChaos_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"chaos-meshorg.PodIoChaos",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func PodIoChaos_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"chaos-meshorg.PodIoChaos",
		"GVK",
		&returns,
	)
	return returns
}

func (p *jsiiProxy_PodIoChaos) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		p,
		"addDependency",
		args,
	)
}

func (p *jsiiProxy_PodIoChaos) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		p,
		"addJsonPatch",
		args,
	)
}

func (p *jsiiProxy_PodIoChaos) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		p,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PodIoChaos) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// PodIOChaos is the Schema for the podiochaos API.
type PodIoChaosProps struct {
	Metadata *cdk8s.ApiObjectMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// PodIOChaosSpec defines the desired state of IOChaos.
	Spec *PodIoChaosSpec `field:"optional" json:"spec" yaml:"spec"`
}

// PodIOChaosSpec defines the desired state of IOChaos.
type PodIoChaosSpec struct {
	// VolumeMountPath represents the target mount path It must be a root of mount path now.
	//
	// TODO: search the mount parent of any path automatically. TODO: support multiple different volume mount path in one pod
	VolumeMountPath *string `field:"required" json:"volumeMountPath" yaml:"volumeMountPath"`
	// Actions are a list of IOChaos actions.
	Actions *[]*PodIoChaosSpecActions `field:"optional" json:"actions" yaml:"actions"`
	// TODO: support multiple different container to inject in one pod.
	Container *string `field:"optional" json:"container" yaml:"container"`
}

// IOChaosAction defines an possible action of IOChaos.
type PodIoChaosSpecActions struct {
	// Path represents a glob of injecting path.
	Path *string `field:"required" json:"path" yaml:"path"`
	// Percent represents the percent probability of injecting this action.
	Percent *float64 `field:"required" json:"percent" yaml:"percent"`
	// IOChaosType represents the type of an IOChaos Action.
	Type *string `field:"required" json:"type" yaml:"type"`
	// Timespec represents a time.
	Atime *PodIoChaosSpecActionsAtime `field:"optional" json:"atime" yaml:"atime"`
	Blocks *float64 `field:"optional" json:"blocks" yaml:"blocks"`
	// Timespec represents a time.
	Ctime *PodIoChaosSpecActionsCtime `field:"optional" json:"ctime" yaml:"ctime"`
	// Faults represents the fault to inject.
	Faults *[]*PodIoChaosSpecActionsFaults `field:"optional" json:"faults" yaml:"faults"`
	Gid *float64 `field:"optional" json:"gid" yaml:"gid"`
	Ino *float64 `field:"optional" json:"ino" yaml:"ino"`
	// FileType represents type of a file.
	Kind *string `field:"optional" json:"kind" yaml:"kind"`
	// Latency represents the latency to inject.
	Latency *string `field:"optional" json:"latency" yaml:"latency"`
	// Methods represents the method that the action will inject in.
	Methods *[]*string `field:"optional" json:"methods" yaml:"methods"`
	// MistakeSpec represents the mistake to inject.
	Mistake *PodIoChaosSpecActionsMistake `field:"optional" json:"mistake" yaml:"mistake"`
	// Timespec represents a time.
	Mtime *PodIoChaosSpecActionsMtime `field:"optional" json:"mtime" yaml:"mtime"`
	Nlink *float64 `field:"optional" json:"nlink" yaml:"nlink"`
	Perm *float64 `field:"optional" json:"perm" yaml:"perm"`
	Rdev *float64 `field:"optional" json:"rdev" yaml:"rdev"`
	Size *float64 `field:"optional" json:"size" yaml:"size"`
	// Source represents the source of current rules.
	Source *string `field:"optional" json:"source" yaml:"source"`
	Uid *float64 `field:"optional" json:"uid" yaml:"uid"`
}

// Timespec represents a time.
type PodIoChaosSpecActionsAtime struct {
	Nsec *float64 `field:"required" json:"nsec" yaml:"nsec"`
	Sec *float64 `field:"required" json:"sec" yaml:"sec"`
}

// Timespec represents a time.
type PodIoChaosSpecActionsCtime struct {
	Nsec *float64 `field:"required" json:"nsec" yaml:"nsec"`
	Sec *float64 `field:"required" json:"sec" yaml:"sec"`
}

// IoFault represents the fault to inject and their weight.
type PodIoChaosSpecActionsFaults struct {
	Errno *float64 `field:"required" json:"errno" yaml:"errno"`
	Weight *float64 `field:"required" json:"weight" yaml:"weight"`
}

// MistakeSpec represents the mistake to inject.
type PodIoChaosSpecActionsMistake struct {
	// Filling determines what is filled in the miskate data.
	Filling PodIoChaosSpecActionsMistakeFilling `field:"optional" json:"filling" yaml:"filling"`
	// Max length of each wrong data segment in bytes.
	MaxLength *float64 `field:"optional" json:"maxLength" yaml:"maxLength"`
	// There will be [1, MaxOccurrences] segments of wrong data.
	MaxOccurrences *float64 `field:"optional" json:"maxOccurrences" yaml:"maxOccurrences"`
}

// Filling determines what is filled in the miskate data.
type PodIoChaosSpecActionsMistakeFilling string

const (
	// zero.
	PodIoChaosSpecActionsMistakeFilling_ZERO PodIoChaosSpecActionsMistakeFilling = "ZERO"
	// random.
	PodIoChaosSpecActionsMistakeFilling_RANDOM PodIoChaosSpecActionsMistakeFilling = "RANDOM"
)

// Timespec represents a time.
type PodIoChaosSpecActionsMtime struct {
	Nsec *float64 `field:"required" json:"nsec" yaml:"nsec"`
	Sec *float64 `field:"required" json:"sec" yaml:"sec"`
}

