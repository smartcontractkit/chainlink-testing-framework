// chaos-meshorg
package chaosmeshorg

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/smartcontractkit/chainlink-env/imports/k8s/podnetworkchaos/chaosmeshorg/jsii"

	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"
	"github.com/smartcontractkit/chainlink-env/imports/k8s/podnetworkchaos/chaosmeshorg/internal"
)

// PodNetworkChaos is the Schema for the PodNetworkChaos API.
type PodNetworkChaos interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for PodNetworkChaos
type jsiiProxy_PodNetworkChaos struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_PodNetworkChaos) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodNetworkChaos) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodNetworkChaos) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodNetworkChaos) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodNetworkChaos) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodNetworkChaos) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PodNetworkChaos) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Defines a "PodNetworkChaos" API object.
func NewPodNetworkChaos(scope constructs.Construct, id *string, props *PodNetworkChaosProps) PodNetworkChaos {
	_init_.Initialize()

	j := jsiiProxy_PodNetworkChaos{}

	_jsii_.Create(
		"chaos-meshorg.PodNetworkChaos",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Defines a "PodNetworkChaos" API object.
func NewPodNetworkChaos_Override(p PodNetworkChaos, scope constructs.Construct, id *string, props *PodNetworkChaosProps) {
	_init_.Initialize()

	_jsii_.Create(
		"chaos-meshorg.PodNetworkChaos",
		[]interface{}{scope, id, props},
		p,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func PodNetworkChaos_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"chaos-meshorg.PodNetworkChaos",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Renders a Kubernetes manifest for "PodNetworkChaos".
//
// This can be used to inline resource manifests inside other objects (e.g. as templates).
func PodNetworkChaos_Manifest(props *PodNetworkChaosProps) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"chaos-meshorg.PodNetworkChaos",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func PodNetworkChaos_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"chaos-meshorg.PodNetworkChaos",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func PodNetworkChaos_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"chaos-meshorg.PodNetworkChaos",
		"GVK",
		&returns,
	)
	return returns
}

func (p *jsiiProxy_PodNetworkChaos) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		p,
		"addDependency",
		args,
	)
}

func (p *jsiiProxy_PodNetworkChaos) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		p,
		"addJsonPatch",
		args,
	)
}

func (p *jsiiProxy_PodNetworkChaos) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		p,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PodNetworkChaos) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// PodNetworkChaos is the Schema for the PodNetworkChaos API.
type PodNetworkChaosProps struct {
	// Spec defines the behavior of a pod chaos experiment.
	Spec *PodNetworkChaosSpec `field:"required" json:"spec" yaml:"spec"`
	Metadata *cdk8s.ApiObjectMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Spec defines the behavior of a pod chaos experiment.
type PodNetworkChaosSpec struct {
	// The ipset on the pod.
	Ipsets *[]*PodNetworkChaosSpecIpsets `field:"optional" json:"ipsets" yaml:"ipsets"`
	// The iptables rules on the pod.
	Iptables *[]*PodNetworkChaosSpecIptables `field:"optional" json:"iptables" yaml:"iptables"`
	// The tc rules on the pod.
	Tcs *[]*PodNetworkChaosSpecTcs `field:"optional" json:"tcs" yaml:"tcs"`
}

// RawIPSet represents an ipset on specific pod.
type PodNetworkChaosSpecIpsets struct {
	// The contents of ipset.
	Cidrs *[]*string `field:"required" json:"cidrs" yaml:"cidrs"`
	// The name of ipset.
	Name *string `field:"required" json:"name" yaml:"name"`
	Source *string `field:"required" json:"source" yaml:"source"`
}

// RawIptables represents the iptables rules on specific pod.
type PodNetworkChaosSpecIptables struct {
	// The block direction of this iptables rule.
	Direction *string `field:"required" json:"direction" yaml:"direction"`
	// The name of iptables chain.
	Name *string `field:"required" json:"name" yaml:"name"`
	Source *string `field:"required" json:"source" yaml:"source"`
	// The name of related ipset.
	Ipsets *[]*string `field:"optional" json:"ipsets" yaml:"ipsets"`
}

// RawTrafficControl represents the traffic control chaos on specific pod.
type PodNetworkChaosSpecTcs struct {
	// The name and namespace of the source network chaos.
	Source *string `field:"required" json:"source" yaml:"source"`
	// The type of traffic control.
	Type *string `field:"required" json:"type" yaml:"type"`
	// Bandwidth represents the detail about bandwidth control action.
	Bandwidth *PodNetworkChaosSpecTcsBandwidth `field:"optional" json:"bandwidth" yaml:"bandwidth"`
	// Corrupt represents the detail about corrupt action.
	Corrupt *PodNetworkChaosSpecTcsCorrupt `field:"optional" json:"corrupt" yaml:"corrupt"`
	// Delay represents the detail about delay action.
	Delay *PodNetworkChaosSpecTcsDelay `field:"optional" json:"delay" yaml:"delay"`
	// DuplicateSpec represents the detail about loss action.
	Duplicate *PodNetworkChaosSpecTcsDuplicate `field:"optional" json:"duplicate" yaml:"duplicate"`
	// The name of target ipset.
	Ipset *string `field:"optional" json:"ipset" yaml:"ipset"`
	// Loss represents the detail about loss action.
	Loss *PodNetworkChaosSpecTcsLoss `field:"optional" json:"loss" yaml:"loss"`
}

// Bandwidth represents the detail about bandwidth control action.
type PodNetworkChaosSpecTcsBandwidth struct {
	// Buffer is the maximum amount of bytes that tokens can be available for instantaneously.
	Buffer *float64 `field:"required" json:"buffer" yaml:"buffer"`
	// Limit is the number of bytes that can be queued waiting for tokens to become available.
	Limit *float64 `field:"required" json:"limit" yaml:"limit"`
	// Rate is the speed knob.
	//
	// Allows bps, kbps, mbps, gbps, tbps unit. bps means bytes per second.
	Rate *string `field:"required" json:"rate" yaml:"rate"`
	// Minburst specifies the size of the peakrate bucket.
	//
	// For perfect accuracy, should be set to the MTU of the interface.  If a peakrate is needed, but some burstiness is acceptable, this size can be raised. A 3000 byte minburst allows around 3mbit/s of peakrate, given 1000 byte packets.
	Minburst *float64 `field:"optional" json:"minburst" yaml:"minburst"`
	// Peakrate is the maximum depletion rate of the bucket.
	//
	// The peakrate does not need to be set, it is only necessary if perfect millisecond timescale shaping is required.
	Peakrate *float64 `field:"optional" json:"peakrate" yaml:"peakrate"`
}

// Corrupt represents the detail about corrupt action.
type PodNetworkChaosSpecTcsCorrupt struct {
	Corrupt *string `field:"required" json:"corrupt" yaml:"corrupt"`
	Correlation *string `field:"optional" json:"correlation" yaml:"correlation"`
}

// Delay represents the detail about delay action.
type PodNetworkChaosSpecTcsDelay struct {
	Latency *string `field:"required" json:"latency" yaml:"latency"`
	Correlation *string `field:"optional" json:"correlation" yaml:"correlation"`
	Jitter *string `field:"optional" json:"jitter" yaml:"jitter"`
	// ReorderSpec defines details of packet reorder.
	Reorder *PodNetworkChaosSpecTcsDelayReorder `field:"optional" json:"reorder" yaml:"reorder"`
}

// ReorderSpec defines details of packet reorder.
type PodNetworkChaosSpecTcsDelayReorder struct {
	Gap *float64 `field:"required" json:"gap" yaml:"gap"`
	Reorder *string `field:"required" json:"reorder" yaml:"reorder"`
	Correlation *string `field:"optional" json:"correlation" yaml:"correlation"`
}

// DuplicateSpec represents the detail about loss action.
type PodNetworkChaosSpecTcsDuplicate struct {
	Duplicate *string `field:"required" json:"duplicate" yaml:"duplicate"`
	Correlation *string `field:"optional" json:"correlation" yaml:"correlation"`
}

// Loss represents the detail about loss action.
type PodNetworkChaosSpecTcsLoss struct {
	Loss *string `field:"required" json:"loss" yaml:"loss"`
	Correlation *string `field:"optional" json:"correlation" yaml:"correlation"`
}

