name: Solana validator build / push image
on: 
  workflow_dispatch:
    inputs:
      artifact_download_url:
        type: string
        description: The url for the chainlink-ccip artifacts
        required: true
      artifacts_sha:
        type: string
        description: The solana programs sha
        required: true
env:
  REGISTRY_ALIAS: w0i8p0z9
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  id-token: write
  contents: read

jobs:
  build-amd64:
    name: Build & Push AMD64 Image
    runs-on: ubuntu-latest # Ensure it supports x86_64
    environment: ecr-prod-publish
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_OIDC_PUBLISH_ECR_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registry-type: 'public'
          registries: ${{ secrets.AWS_PROD_ACCOUNT_NUMBER }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download CCIP artifacts
        run: |
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN}}" -o artifact.zip ${{ inputs.ARTIFACT_DOWNLOAD_URL }}
          unzip artifact.zip -d /home/runner/work/chainlink-testing-framework/chainlink-testing-framework/images/solana-validator/solana_artifacts

      - name: Build and Push AMD64 Image
        uses: docker/build-push-action@v5
        with:
          context: ./images/solana-validator/
          file: ./images/solana-validator/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.REGISTRY_ALIAS }}/solana-validator:sha-${{ inputs.artifacts_sha }}-amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-arm64:
    name: Build & Push Arm64 Image
    runs-on: ubuntu-24.04-arm # Ensure it supports x86_64
    environment: ecr-prod-publish
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_OIDC_PUBLISH_ECR_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registry-type: 'public'
          registries: ${{ secrets.AWS_PROD_ACCOUNT_NUMBER }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download CCIP artifacts
        run: |
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN}}" -o artifact.zip ${{ inputs.ARTIFACT_DOWNLOAD_URL }}
          unzip artifact.zip -d /home/runner/work/chainlink-testing-framework/chainlink-testing-framework/images/solana-validator/solana_artifacts

      - name: Build and Push Arm64 Image
        uses: docker/build-push-action@v5
        with:
          context: ./images/solana-validator/
          file: ./images/solana-validator/Dockerfile
          push: true
          platforms: linux/arm64
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.REGISTRY_ALIAS }}/solana-validator:sha-${{ inputs.artifacts_sha }}-arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
