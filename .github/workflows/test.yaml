name: Tests
on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repo
        uses: actions/checkout@v3
      - uses: smartcontractkit/tool-versions-to-env-action@v1.0.8
        id: go-version
      - name: Install Go ${{ steps.go-version.outputs.golang_version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.go-version.outputs.golang_version }}
      - name: Cache Vendor Packages
        uses: actions/cache@v3
        id: cache-packages
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go2-
      - name: Download Go Vendor Packages
        if: steps.cache-packages.outputs.cache-hit != 'true'
        run: make install_ci
      # gotestfmt gives us pretty test output
      - name: Set Up gotestfmt
        uses: GoTestTools/gotestfmt-action@v2
        with:
          token: ${{ github.token }} # Avoids rate-limiting
      - name: Run Tests
        run: |
          PATH=$PATH:$(go env GOPATH)/bin
          export PATH
          set -euo pipefail
          go test -json -cover -covermode=count -coverprofile=unit-test-coverage.out ./client ./gauntlet ./testreporters 2>&1 | tee /tmp/gotest.log | gotestfmt
      - name: Code Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./unit-test-coverage.out
          name: codecov-umbrella
      - name: Publish Artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs
          path: ./logs
