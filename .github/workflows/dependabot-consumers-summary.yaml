# This pipeline aggregates summary of Dependabot PRs for all our dependants
# Used to analyze major and alpha releases
name: Consumers Dependabot Updates

on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:

jobs:
  find_dependabot_prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up jq for JSON parsing
        run: | 
          sudo apt-get install -y jq
      - name: Find Dependabot PRs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Define the list of repositories
          repos=(
            "smartcontractkit/chainlink"
            "smartcontractkit/chainlink-solana"
            "smartcontractkit/chainlink-cosmos"
            "smartcontractkit/chainlink-starknet"
            "smartcontractkit/.github"
            "smartcontractkit/ccip"
          )
          
          # Define the list of packages to search for
          pkgs=(
              "github.com/smartcontractkit/chainlink-testing-framework/lib"
              "github.com/smartcontractkit/chainlink-testing-framework/wasp"
              "github.com/smartcontractkit/chainlink-testing-framework/havoc"
              "github.com/smartcontractkit/chainlink-testing-framework/seth"
              "github.com/smartcontractkit/chainlink-testing-framework/k8s-test-runner"
          )
          
          # Initialize the summary with a heading
          echo "# Dependabot PRs for Bumping Dependencies" >> "$GITHUB_STEP_SUMMARY"
                   
          # Loop through each repository and package
          for repo in "${repos[@]}"; do
            for pkg in "${pkgs[@]}"; do
              # Construct the title pattern to search for
              title_pattern="Bump $pkg from"

              # Print the repository and package in the summary
              echo "### Repository: ${repo}, Dependent: ${pkg}" >> "$GITHUB_STEP_SUMMARY"

              # Search for PRs matching the pattern
              prs=$(gh pr list --repo "$repo" --search "$title_pattern" --json title,url)
              
              # If no PRs found, print a message
              if [ -z "$prs" ]; then
                echo "No PRs found for $pkg in $repo" >> "$GITHUB_STEP_SUMMARY"
              else
                # Print the PRs in the summary
                echo "$prs" | jq -r '.[] | "- [\(.title)](\(.url))"' >> "$GITHUB_STEP_SUMMARY"
              fi
            done
          done

      - name: Print Summary
        run: cat "$GITHUB_STEP_SUMMARY"
