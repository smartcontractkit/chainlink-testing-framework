// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethereum

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PreCoordinatorABI is the input ABI used to generate the binding from.
const PreCoordinatorABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minresponses\",\"type\":\"uint256\"}],\"name\":\"NewServiceAgreement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"name\":\"ServiceAgreementAnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"}],\"name\":\"ServiceAgreementDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ServiceAgreementRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"name\":\"ServiceAgreementResponseReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_data\",\"type\":\"int256\"}],\"name\":\"chainlinkCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minResponses\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_jobIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_payments\",\"type\":\"uint256[]\"}],\"name\":\"createServiceAgreement\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_saId\",\"type\":\"bytes32\"}],\"name\":\"getServiceAgreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minResponses\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"jobIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payments\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_saId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"oracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// PreCoordinatorBin is the compiled bytecode used for deploying new contracts.
var PreCoordinatorBin = ""

// DeployPreCoordinator deploys a new Ethereum contract, binding an instance of PreCoordinator to it.
func DeployPreCoordinator(auth *bind.TransactOpts, backend bind.ContractBackend, _link common.Address) (common.Address, *types.Transaction, *PreCoordinator, error) {
	parsed, err := abi.JSON(strings.NewReader(PreCoordinatorABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PreCoordinatorBin), backend, _link)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PreCoordinator{PreCoordinatorCaller: PreCoordinatorCaller{contract: contract}, PreCoordinatorTransactor: PreCoordinatorTransactor{contract: contract}, PreCoordinatorFilterer: PreCoordinatorFilterer{contract: contract}}, nil
}

// PreCoordinator is an auto generated Go binding around an Ethereum contract.
type PreCoordinator struct {
	PreCoordinatorCaller     // Read-only binding to the contract
	PreCoordinatorTransactor // Write-only binding to the contract
	PreCoordinatorFilterer   // Log filterer for contract events
}

// PreCoordinatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type PreCoordinatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PreCoordinatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PreCoordinatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PreCoordinatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PreCoordinatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PreCoordinatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PreCoordinatorSession struct {
	Contract     *PreCoordinator   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PreCoordinatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PreCoordinatorCallerSession struct {
	Contract *PreCoordinatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// PreCoordinatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PreCoordinatorTransactorSession struct {
	Contract     *PreCoordinatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// PreCoordinatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type PreCoordinatorRaw struct {
	Contract *PreCoordinator // Generic contract binding to access the raw methods on
}

// PreCoordinatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PreCoordinatorCallerRaw struct {
	Contract *PreCoordinatorCaller // Generic read-only contract binding to access the raw methods on
}

// PreCoordinatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PreCoordinatorTransactorRaw struct {
	Contract *PreCoordinatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPreCoordinator creates a new instance of PreCoordinator, bound to a specific deployed contract.
func NewPreCoordinator(address common.Address, backend bind.ContractBackend) (*PreCoordinator, error) {
	contract, err := bindPreCoordinator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PreCoordinator{PreCoordinatorCaller: PreCoordinatorCaller{contract: contract}, PreCoordinatorTransactor: PreCoordinatorTransactor{contract: contract}, PreCoordinatorFilterer: PreCoordinatorFilterer{contract: contract}}, nil
}

// NewPreCoordinatorCaller creates a new read-only instance of PreCoordinator, bound to a specific deployed contract.
func NewPreCoordinatorCaller(address common.Address, caller bind.ContractCaller) (*PreCoordinatorCaller, error) {
	contract, err := bindPreCoordinator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorCaller{contract: contract}, nil
}

// NewPreCoordinatorTransactor creates a new write-only instance of PreCoordinator, bound to a specific deployed contract.
func NewPreCoordinatorTransactor(address common.Address, transactor bind.ContractTransactor) (*PreCoordinatorTransactor, error) {
	contract, err := bindPreCoordinator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorTransactor{contract: contract}, nil
}

// NewPreCoordinatorFilterer creates a new log filterer instance of PreCoordinator, bound to a specific deployed contract.
func NewPreCoordinatorFilterer(address common.Address, filterer bind.ContractFilterer) (*PreCoordinatorFilterer, error) {
	contract, err := bindPreCoordinator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorFilterer{contract: contract}, nil
}

// bindPreCoordinator binds a generic wrapper to an already deployed contract.
func bindPreCoordinator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PreCoordinatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PreCoordinator *PreCoordinatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PreCoordinator.Contract.PreCoordinatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PreCoordinator *PreCoordinatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreCoordinator.Contract.PreCoordinatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PreCoordinator *PreCoordinatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PreCoordinator.Contract.PreCoordinatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PreCoordinator *PreCoordinatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PreCoordinator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PreCoordinator *PreCoordinatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreCoordinator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PreCoordinator *PreCoordinatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PreCoordinator.Contract.contract.Transact(opts, method, params...)
}

// GetChainlinkToken is a free data retrieval call binding the contract method 0x165d35e1.
//
// Solidity: function getChainlinkToken() view returns(address)
func (_PreCoordinator *PreCoordinatorCaller) GetChainlinkToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PreCoordinator.contract.Call(opts, &out, "getChainlinkToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetChainlinkToken is a free data retrieval call binding the contract method 0x165d35e1.
//
// Solidity: function getChainlinkToken() view returns(address)
func (_PreCoordinator *PreCoordinatorSession) GetChainlinkToken() (common.Address, error) {
	return _PreCoordinator.Contract.GetChainlinkToken(&_PreCoordinator.CallOpts)
}

// GetChainlinkToken is a free data retrieval call binding the contract method 0x165d35e1.
//
// Solidity: function getChainlinkToken() view returns(address)
func (_PreCoordinator *PreCoordinatorCallerSession) GetChainlinkToken() (common.Address, error) {
	return _PreCoordinator.Contract.GetChainlinkToken(&_PreCoordinator.CallOpts)
}

// GetServiceAgreement is a free data retrieval call binding the contract method 0xaf52c981.
//
// Solidity: function getServiceAgreement(bytes32 _saId) view returns(uint256 totalPayment, uint256 minResponses, address[] oracles, bytes32[] jobIds, uint256[] payments)
func (_PreCoordinator *PreCoordinatorCaller) GetServiceAgreement(opts *bind.CallOpts, _saId [32]byte) (struct {
	TotalPayment *big.Int
	MinResponses *big.Int
	Oracles      []common.Address
	JobIds       [][32]byte
	Payments     []*big.Int
}, error) {
	var out []interface{}
	err := _PreCoordinator.contract.Call(opts, &out, "getServiceAgreement", _saId)

	outstruct := new(struct {
		TotalPayment *big.Int
		MinResponses *big.Int
		Oracles      []common.Address
		JobIds       [][32]byte
		Payments     []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalPayment = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.MinResponses = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Oracles = *abi.ConvertType(out[2], new([]common.Address)).(*[]common.Address)
	outstruct.JobIds = *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)
	outstruct.Payments = *abi.ConvertType(out[4], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetServiceAgreement is a free data retrieval call binding the contract method 0xaf52c981.
//
// Solidity: function getServiceAgreement(bytes32 _saId) view returns(uint256 totalPayment, uint256 minResponses, address[] oracles, bytes32[] jobIds, uint256[] payments)
func (_PreCoordinator *PreCoordinatorSession) GetServiceAgreement(_saId [32]byte) (struct {
	TotalPayment *big.Int
	MinResponses *big.Int
	Oracles      []common.Address
	JobIds       [][32]byte
	Payments     []*big.Int
}, error) {
	return _PreCoordinator.Contract.GetServiceAgreement(&_PreCoordinator.CallOpts, _saId)
}

// GetServiceAgreement is a free data retrieval call binding the contract method 0xaf52c981.
//
// Solidity: function getServiceAgreement(bytes32 _saId) view returns(uint256 totalPayment, uint256 minResponses, address[] oracles, bytes32[] jobIds, uint256[] payments)
func (_PreCoordinator *PreCoordinatorCallerSession) GetServiceAgreement(_saId [32]byte) (struct {
	TotalPayment *big.Int
	MinResponses *big.Int
	Oracles      []common.Address
	JobIds       [][32]byte
	Payments     []*big.Int
}, error) {
	return _PreCoordinator.Contract.GetServiceAgreement(&_PreCoordinator.CallOpts, _saId)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_PreCoordinator *PreCoordinatorCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _PreCoordinator.contract.Call(opts, &out, "isOwner")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_PreCoordinator *PreCoordinatorSession) IsOwner() (bool, error) {
	return _PreCoordinator.Contract.IsOwner(&_PreCoordinator.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_PreCoordinator *PreCoordinatorCallerSession) IsOwner() (bool, error) {
	return _PreCoordinator.Contract.IsOwner(&_PreCoordinator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PreCoordinator *PreCoordinatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PreCoordinator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PreCoordinator *PreCoordinatorSession) Owner() (common.Address, error) {
	return _PreCoordinator.Contract.Owner(&_PreCoordinator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PreCoordinator *PreCoordinatorCallerSession) Owner() (common.Address, error) {
	return _PreCoordinator.Contract.Owner(&_PreCoordinator.CallOpts)
}

// CancelOracleRequest is a paid mutator transaction binding the contract method 0x6ee4d553.
//
// Solidity: function cancelOracleRequest(bytes32 _requestId, uint256 _payment, bytes4 _callbackFunctionId, uint256 _expiration) returns()
func (_PreCoordinator *PreCoordinatorTransactor) CancelOracleRequest(opts *bind.TransactOpts, _requestId [32]byte, _payment *big.Int, _callbackFunctionId [4]byte, _expiration *big.Int) (*types.Transaction, error) {
	return _PreCoordinator.contract.Transact(opts, "cancelOracleRequest", _requestId, _payment, _callbackFunctionId, _expiration)
}

// CancelOracleRequest is a paid mutator transaction binding the contract method 0x6ee4d553.
//
// Solidity: function cancelOracleRequest(bytes32 _requestId, uint256 _payment, bytes4 _callbackFunctionId, uint256 _expiration) returns()
func (_PreCoordinator *PreCoordinatorSession) CancelOracleRequest(_requestId [32]byte, _payment *big.Int, _callbackFunctionId [4]byte, _expiration *big.Int) (*types.Transaction, error) {
	return _PreCoordinator.Contract.CancelOracleRequest(&_PreCoordinator.TransactOpts, _requestId, _payment, _callbackFunctionId, _expiration)
}

// CancelOracleRequest is a paid mutator transaction binding the contract method 0x6ee4d553.
//
// Solidity: function cancelOracleRequest(bytes32 _requestId, uint256 _payment, bytes4 _callbackFunctionId, uint256 _expiration) returns()
func (_PreCoordinator *PreCoordinatorTransactorSession) CancelOracleRequest(_requestId [32]byte, _payment *big.Int, _callbackFunctionId [4]byte, _expiration *big.Int) (*types.Transaction, error) {
	return _PreCoordinator.Contract.CancelOracleRequest(&_PreCoordinator.TransactOpts, _requestId, _payment, _callbackFunctionId, _expiration)
}

// ChainlinkCallback is a paid mutator transaction binding the contract method 0x6a9705b4.
//
// Solidity: function chainlinkCallback(bytes32 _requestId, int256 _data) returns(bool)
func (_PreCoordinator *PreCoordinatorTransactor) ChainlinkCallback(opts *bind.TransactOpts, _requestId [32]byte, _data *big.Int) (*types.Transaction, error) {
	return _PreCoordinator.contract.Transact(opts, "chainlinkCallback", _requestId, _data)
}

// ChainlinkCallback is a paid mutator transaction binding the contract method 0x6a9705b4.
//
// Solidity: function chainlinkCallback(bytes32 _requestId, int256 _data) returns(bool)
func (_PreCoordinator *PreCoordinatorSession) ChainlinkCallback(_requestId [32]byte, _data *big.Int) (*types.Transaction, error) {
	return _PreCoordinator.Contract.ChainlinkCallback(&_PreCoordinator.TransactOpts, _requestId, _data)
}

// ChainlinkCallback is a paid mutator transaction binding the contract method 0x6a9705b4.
//
// Solidity: function chainlinkCallback(bytes32 _requestId, int256 _data) returns(bool)
func (_PreCoordinator *PreCoordinatorTransactorSession) ChainlinkCallback(_requestId [32]byte, _data *big.Int) (*types.Transaction, error) {
	return _PreCoordinator.Contract.ChainlinkCallback(&_PreCoordinator.TransactOpts, _requestId, _data)
}

// CreateServiceAgreement is a paid mutator transaction binding the contract method 0x834b55e0.
//
// Solidity: function createServiceAgreement(uint256 _minResponses, address[] _oracles, bytes32[] _jobIds, uint256[] _payments) returns(bytes32 saId)
func (_PreCoordinator *PreCoordinatorTransactor) CreateServiceAgreement(opts *bind.TransactOpts, _minResponses *big.Int, _oracles []common.Address, _jobIds [][32]byte, _payments []*big.Int) (*types.Transaction, error) {
	return _PreCoordinator.contract.Transact(opts, "createServiceAgreement", _minResponses, _oracles, _jobIds, _payments)
}

// CreateServiceAgreement is a paid mutator transaction binding the contract method 0x834b55e0.
//
// Solidity: function createServiceAgreement(uint256 _minResponses, address[] _oracles, bytes32[] _jobIds, uint256[] _payments) returns(bytes32 saId)
func (_PreCoordinator *PreCoordinatorSession) CreateServiceAgreement(_minResponses *big.Int, _oracles []common.Address, _jobIds [][32]byte, _payments []*big.Int) (*types.Transaction, error) {
	return _PreCoordinator.Contract.CreateServiceAgreement(&_PreCoordinator.TransactOpts, _minResponses, _oracles, _jobIds, _payments)
}

// CreateServiceAgreement is a paid mutator transaction binding the contract method 0x834b55e0.
//
// Solidity: function createServiceAgreement(uint256 _minResponses, address[] _oracles, bytes32[] _jobIds, uint256[] _payments) returns(bytes32 saId)
func (_PreCoordinator *PreCoordinatorTransactorSession) CreateServiceAgreement(_minResponses *big.Int, _oracles []common.Address, _jobIds [][32]byte, _payments []*big.Int) (*types.Transaction, error) {
	return _PreCoordinator.Contract.CreateServiceAgreement(&_PreCoordinator.TransactOpts, _minResponses, _oracles, _jobIds, _payments)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address _sender, uint256 _amount, bytes _data) returns()
func (_PreCoordinator *PreCoordinatorTransactor) OnTokenTransfer(opts *bind.TransactOpts, _sender common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _PreCoordinator.contract.Transact(opts, "onTokenTransfer", _sender, _amount, _data)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address _sender, uint256 _amount, bytes _data) returns()
func (_PreCoordinator *PreCoordinatorSession) OnTokenTransfer(_sender common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _PreCoordinator.Contract.OnTokenTransfer(&_PreCoordinator.TransactOpts, _sender, _amount, _data)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address _sender, uint256 _amount, bytes _data) returns()
func (_PreCoordinator *PreCoordinatorTransactorSession) OnTokenTransfer(_sender common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _PreCoordinator.Contract.OnTokenTransfer(&_PreCoordinator.TransactOpts, _sender, _amount, _data)
}

// OracleRequest is a paid mutator transaction binding the contract method 0x40429946.
//
// Solidity: function oracleRequest(address _sender, uint256 _payment, bytes32 _saId, address _callbackAddress, bytes4 _callbackFunctionId, uint256 _nonce, uint256 , bytes _data) returns()
func (_PreCoordinator *PreCoordinatorTransactor) OracleRequest(opts *bind.TransactOpts, _sender common.Address, _payment *big.Int, _saId [32]byte, _callbackAddress common.Address, _callbackFunctionId [4]byte, _nonce *big.Int, arg6 *big.Int, _data []byte) (*types.Transaction, error) {
	return _PreCoordinator.contract.Transact(opts, "oracleRequest", _sender, _payment, _saId, _callbackAddress, _callbackFunctionId, _nonce, arg6, _data)
}

// OracleRequest is a paid mutator transaction binding the contract method 0x40429946.
//
// Solidity: function oracleRequest(address _sender, uint256 _payment, bytes32 _saId, address _callbackAddress, bytes4 _callbackFunctionId, uint256 _nonce, uint256 , bytes _data) returns()
func (_PreCoordinator *PreCoordinatorSession) OracleRequest(_sender common.Address, _payment *big.Int, _saId [32]byte, _callbackAddress common.Address, _callbackFunctionId [4]byte, _nonce *big.Int, arg6 *big.Int, _data []byte) (*types.Transaction, error) {
	return _PreCoordinator.Contract.OracleRequest(&_PreCoordinator.TransactOpts, _sender, _payment, _saId, _callbackAddress, _callbackFunctionId, _nonce, arg6, _data)
}

// OracleRequest is a paid mutator transaction binding the contract method 0x40429946.
//
// Solidity: function oracleRequest(address _sender, uint256 _payment, bytes32 _saId, address _callbackAddress, bytes4 _callbackFunctionId, uint256 _nonce, uint256 , bytes _data) returns()
func (_PreCoordinator *PreCoordinatorTransactorSession) OracleRequest(_sender common.Address, _payment *big.Int, _saId [32]byte, _callbackAddress common.Address, _callbackFunctionId [4]byte, _nonce *big.Int, arg6 *big.Int, _data []byte) (*types.Transaction, error) {
	return _PreCoordinator.Contract.OracleRequest(&_PreCoordinator.TransactOpts, _sender, _payment, _saId, _callbackAddress, _callbackFunctionId, _nonce, arg6, _data)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PreCoordinator *PreCoordinatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PreCoordinator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PreCoordinator *PreCoordinatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PreCoordinator.Contract.TransferOwnership(&_PreCoordinator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PreCoordinator *PreCoordinatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PreCoordinator.Contract.TransferOwnership(&_PreCoordinator.TransactOpts, newOwner)
}

// WithdrawLink is a paid mutator transaction binding the contract method 0x8dc654a2.
//
// Solidity: function withdrawLink() returns()
func (_PreCoordinator *PreCoordinatorTransactor) WithdrawLink(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreCoordinator.contract.Transact(opts, "withdrawLink")
}

// WithdrawLink is a paid mutator transaction binding the contract method 0x8dc654a2.
//
// Solidity: function withdrawLink() returns()
func (_PreCoordinator *PreCoordinatorSession) WithdrawLink() (*types.Transaction, error) {
	return _PreCoordinator.Contract.WithdrawLink(&_PreCoordinator.TransactOpts)
}

// WithdrawLink is a paid mutator transaction binding the contract method 0x8dc654a2.
//
// Solidity: function withdrawLink() returns()
func (_PreCoordinator *PreCoordinatorTransactorSession) WithdrawLink() (*types.Transaction, error) {
	return _PreCoordinator.Contract.WithdrawLink(&_PreCoordinator.TransactOpts)
}

// PreCoordinatorChainlinkCancelledIterator is returned from FilterChainlinkCancelled and is used to iterate over the raw logs and unpacked data for ChainlinkCancelled events raised by the PreCoordinator contract.
type PreCoordinatorChainlinkCancelledIterator struct {
	Event *PreCoordinatorChainlinkCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreCoordinatorChainlinkCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreCoordinatorChainlinkCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreCoordinatorChainlinkCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreCoordinatorChainlinkCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreCoordinatorChainlinkCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreCoordinatorChainlinkCancelled represents a ChainlinkCancelled event raised by the PreCoordinator contract.
type PreCoordinatorChainlinkCancelled struct {
	Id  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChainlinkCancelled is a free log retrieval operation binding the contract event 0xe1fe3afa0f7f761ff0a8b89086790efd5140d2907ebd5b7ff6bfcb5e075fd4c5.
//
// Solidity: event ChainlinkCancelled(bytes32 indexed id)
func (_PreCoordinator *PreCoordinatorFilterer) FilterChainlinkCancelled(opts *bind.FilterOpts, id [][32]byte) (*PreCoordinatorChainlinkCancelledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _PreCoordinator.contract.FilterLogs(opts, "ChainlinkCancelled", idRule)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorChainlinkCancelledIterator{contract: _PreCoordinator.contract, event: "ChainlinkCancelled", logs: logs, sub: sub}, nil
}

// WatchChainlinkCancelled is a free log subscription operation binding the contract event 0xe1fe3afa0f7f761ff0a8b89086790efd5140d2907ebd5b7ff6bfcb5e075fd4c5.
//
// Solidity: event ChainlinkCancelled(bytes32 indexed id)
func (_PreCoordinator *PreCoordinatorFilterer) WatchChainlinkCancelled(opts *bind.WatchOpts, sink chan<- *PreCoordinatorChainlinkCancelled, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _PreCoordinator.contract.WatchLogs(opts, "ChainlinkCancelled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreCoordinatorChainlinkCancelled)
				if err := _PreCoordinator.contract.UnpackLog(event, "ChainlinkCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChainlinkCancelled is a log parse operation binding the contract event 0xe1fe3afa0f7f761ff0a8b89086790efd5140d2907ebd5b7ff6bfcb5e075fd4c5.
//
// Solidity: event ChainlinkCancelled(bytes32 indexed id)
func (_PreCoordinator *PreCoordinatorFilterer) ParseChainlinkCancelled(log types.Log) (*PreCoordinatorChainlinkCancelled, error) {
	event := new(PreCoordinatorChainlinkCancelled)
	if err := _PreCoordinator.contract.UnpackLog(event, "ChainlinkCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreCoordinatorChainlinkFulfilledIterator is returned from FilterChainlinkFulfilled and is used to iterate over the raw logs and unpacked data for ChainlinkFulfilled events raised by the PreCoordinator contract.
type PreCoordinatorChainlinkFulfilledIterator struct {
	Event *PreCoordinatorChainlinkFulfilled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreCoordinatorChainlinkFulfilledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreCoordinatorChainlinkFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreCoordinatorChainlinkFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreCoordinatorChainlinkFulfilledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreCoordinatorChainlinkFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreCoordinatorChainlinkFulfilled represents a ChainlinkFulfilled event raised by the PreCoordinator contract.
type PreCoordinatorChainlinkFulfilled struct {
	Id  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChainlinkFulfilled is a free log retrieval operation binding the contract event 0x7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a.
//
// Solidity: event ChainlinkFulfilled(bytes32 indexed id)
func (_PreCoordinator *PreCoordinatorFilterer) FilterChainlinkFulfilled(opts *bind.FilterOpts, id [][32]byte) (*PreCoordinatorChainlinkFulfilledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _PreCoordinator.contract.FilterLogs(opts, "ChainlinkFulfilled", idRule)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorChainlinkFulfilledIterator{contract: _PreCoordinator.contract, event: "ChainlinkFulfilled", logs: logs, sub: sub}, nil
}

// WatchChainlinkFulfilled is a free log subscription operation binding the contract event 0x7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a.
//
// Solidity: event ChainlinkFulfilled(bytes32 indexed id)
func (_PreCoordinator *PreCoordinatorFilterer) WatchChainlinkFulfilled(opts *bind.WatchOpts, sink chan<- *PreCoordinatorChainlinkFulfilled, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _PreCoordinator.contract.WatchLogs(opts, "ChainlinkFulfilled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreCoordinatorChainlinkFulfilled)
				if err := _PreCoordinator.contract.UnpackLog(event, "ChainlinkFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChainlinkFulfilled is a log parse operation binding the contract event 0x7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a.
//
// Solidity: event ChainlinkFulfilled(bytes32 indexed id)
func (_PreCoordinator *PreCoordinatorFilterer) ParseChainlinkFulfilled(log types.Log) (*PreCoordinatorChainlinkFulfilled, error) {
	event := new(PreCoordinatorChainlinkFulfilled)
	if err := _PreCoordinator.contract.UnpackLog(event, "ChainlinkFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreCoordinatorChainlinkRequestedIterator is returned from FilterChainlinkRequested and is used to iterate over the raw logs and unpacked data for ChainlinkRequested events raised by the PreCoordinator contract.
type PreCoordinatorChainlinkRequestedIterator struct {
	Event *PreCoordinatorChainlinkRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreCoordinatorChainlinkRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreCoordinatorChainlinkRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreCoordinatorChainlinkRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreCoordinatorChainlinkRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreCoordinatorChainlinkRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreCoordinatorChainlinkRequested represents a ChainlinkRequested event raised by the PreCoordinator contract.
type PreCoordinatorChainlinkRequested struct {
	Id  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChainlinkRequested is a free log retrieval operation binding the contract event 0xb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af9.
//
// Solidity: event ChainlinkRequested(bytes32 indexed id)
func (_PreCoordinator *PreCoordinatorFilterer) FilterChainlinkRequested(opts *bind.FilterOpts, id [][32]byte) (*PreCoordinatorChainlinkRequestedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _PreCoordinator.contract.FilterLogs(opts, "ChainlinkRequested", idRule)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorChainlinkRequestedIterator{contract: _PreCoordinator.contract, event: "ChainlinkRequested", logs: logs, sub: sub}, nil
}

// WatchChainlinkRequested is a free log subscription operation binding the contract event 0xb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af9.
//
// Solidity: event ChainlinkRequested(bytes32 indexed id)
func (_PreCoordinator *PreCoordinatorFilterer) WatchChainlinkRequested(opts *bind.WatchOpts, sink chan<- *PreCoordinatorChainlinkRequested, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _PreCoordinator.contract.WatchLogs(opts, "ChainlinkRequested", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreCoordinatorChainlinkRequested)
				if err := _PreCoordinator.contract.UnpackLog(event, "ChainlinkRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChainlinkRequested is a log parse operation binding the contract event 0xb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af9.
//
// Solidity: event ChainlinkRequested(bytes32 indexed id)
func (_PreCoordinator *PreCoordinatorFilterer) ParseChainlinkRequested(log types.Log) (*PreCoordinatorChainlinkRequested, error) {
	event := new(PreCoordinatorChainlinkRequested)
	if err := _PreCoordinator.contract.UnpackLog(event, "ChainlinkRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreCoordinatorNewServiceAgreementIterator is returned from FilterNewServiceAgreement and is used to iterate over the raw logs and unpacked data for NewServiceAgreement events raised by the PreCoordinator contract.
type PreCoordinatorNewServiceAgreementIterator struct {
	Event *PreCoordinatorNewServiceAgreement // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreCoordinatorNewServiceAgreementIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreCoordinatorNewServiceAgreement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreCoordinatorNewServiceAgreement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreCoordinatorNewServiceAgreementIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreCoordinatorNewServiceAgreementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreCoordinatorNewServiceAgreement represents a NewServiceAgreement event raised by the PreCoordinator contract.
type PreCoordinatorNewServiceAgreement struct {
	SaId         [32]byte
	Payment      *big.Int
	Minresponses *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterNewServiceAgreement is a free log retrieval operation binding the contract event 0x1df950b8dca286fff2ebb83642851b5a9db00ff4bc87815828e845b45d183eaf.
//
// Solidity: event NewServiceAgreement(bytes32 indexed saId, uint256 payment, uint256 minresponses)
func (_PreCoordinator *PreCoordinatorFilterer) FilterNewServiceAgreement(opts *bind.FilterOpts, saId [][32]byte) (*PreCoordinatorNewServiceAgreementIterator, error) {

	var saIdRule []interface{}
	for _, saIdItem := range saId {
		saIdRule = append(saIdRule, saIdItem)
	}

	logs, sub, err := _PreCoordinator.contract.FilterLogs(opts, "NewServiceAgreement", saIdRule)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorNewServiceAgreementIterator{contract: _PreCoordinator.contract, event: "NewServiceAgreement", logs: logs, sub: sub}, nil
}

// WatchNewServiceAgreement is a free log subscription operation binding the contract event 0x1df950b8dca286fff2ebb83642851b5a9db00ff4bc87815828e845b45d183eaf.
//
// Solidity: event NewServiceAgreement(bytes32 indexed saId, uint256 payment, uint256 minresponses)
func (_PreCoordinator *PreCoordinatorFilterer) WatchNewServiceAgreement(opts *bind.WatchOpts, sink chan<- *PreCoordinatorNewServiceAgreement, saId [][32]byte) (event.Subscription, error) {

	var saIdRule []interface{}
	for _, saIdItem := range saId {
		saIdRule = append(saIdRule, saIdItem)
	}

	logs, sub, err := _PreCoordinator.contract.WatchLogs(opts, "NewServiceAgreement", saIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreCoordinatorNewServiceAgreement)
				if err := _PreCoordinator.contract.UnpackLog(event, "NewServiceAgreement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewServiceAgreement is a log parse operation binding the contract event 0x1df950b8dca286fff2ebb83642851b5a9db00ff4bc87815828e845b45d183eaf.
//
// Solidity: event NewServiceAgreement(bytes32 indexed saId, uint256 payment, uint256 minresponses)
func (_PreCoordinator *PreCoordinatorFilterer) ParseNewServiceAgreement(log types.Log) (*PreCoordinatorNewServiceAgreement, error) {
	event := new(PreCoordinatorNewServiceAgreement)
	if err := _PreCoordinator.contract.UnpackLog(event, "NewServiceAgreement", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreCoordinatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PreCoordinator contract.
type PreCoordinatorOwnershipTransferredIterator struct {
	Event *PreCoordinatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreCoordinatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreCoordinatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreCoordinatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreCoordinatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreCoordinatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreCoordinatorOwnershipTransferred represents a OwnershipTransferred event raised by the PreCoordinator contract.
type PreCoordinatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PreCoordinator *PreCoordinatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PreCoordinatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PreCoordinator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorOwnershipTransferredIterator{contract: _PreCoordinator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PreCoordinator *PreCoordinatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PreCoordinatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PreCoordinator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreCoordinatorOwnershipTransferred)
				if err := _PreCoordinator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PreCoordinator *PreCoordinatorFilterer) ParseOwnershipTransferred(log types.Log) (*PreCoordinatorOwnershipTransferred, error) {
	event := new(PreCoordinatorOwnershipTransferred)
	if err := _PreCoordinator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreCoordinatorServiceAgreementAnswerUpdatedIterator is returned from FilterServiceAgreementAnswerUpdated and is used to iterate over the raw logs and unpacked data for ServiceAgreementAnswerUpdated events raised by the PreCoordinator contract.
type PreCoordinatorServiceAgreementAnswerUpdatedIterator struct {
	Event *PreCoordinatorServiceAgreementAnswerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreCoordinatorServiceAgreementAnswerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreCoordinatorServiceAgreementAnswerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreCoordinatorServiceAgreementAnswerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreCoordinatorServiceAgreementAnswerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreCoordinatorServiceAgreementAnswerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreCoordinatorServiceAgreementAnswerUpdated represents a ServiceAgreementAnswerUpdated event raised by the PreCoordinator contract.
type PreCoordinatorServiceAgreementAnswerUpdated struct {
	SaId      [32]byte
	RequestId [32]byte
	Answer    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterServiceAgreementAnswerUpdated is a free log retrieval operation binding the contract event 0xe991444bc589ce1a82e7cbe4e5ebaa8aaa2a5c44964bd32d2af07dd846a638ba.
//
// Solidity: event ServiceAgreementAnswerUpdated(bytes32 indexed saId, bytes32 indexed requestId, int256 answer)
func (_PreCoordinator *PreCoordinatorFilterer) FilterServiceAgreementAnswerUpdated(opts *bind.FilterOpts, saId [][32]byte, requestId [][32]byte) (*PreCoordinatorServiceAgreementAnswerUpdatedIterator, error) {

	var saIdRule []interface{}
	for _, saIdItem := range saId {
		saIdRule = append(saIdRule, saIdItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _PreCoordinator.contract.FilterLogs(opts, "ServiceAgreementAnswerUpdated", saIdRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorServiceAgreementAnswerUpdatedIterator{contract: _PreCoordinator.contract, event: "ServiceAgreementAnswerUpdated", logs: logs, sub: sub}, nil
}

// WatchServiceAgreementAnswerUpdated is a free log subscription operation binding the contract event 0xe991444bc589ce1a82e7cbe4e5ebaa8aaa2a5c44964bd32d2af07dd846a638ba.
//
// Solidity: event ServiceAgreementAnswerUpdated(bytes32 indexed saId, bytes32 indexed requestId, int256 answer)
func (_PreCoordinator *PreCoordinatorFilterer) WatchServiceAgreementAnswerUpdated(opts *bind.WatchOpts, sink chan<- *PreCoordinatorServiceAgreementAnswerUpdated, saId [][32]byte, requestId [][32]byte) (event.Subscription, error) {

	var saIdRule []interface{}
	for _, saIdItem := range saId {
		saIdRule = append(saIdRule, saIdItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _PreCoordinator.contract.WatchLogs(opts, "ServiceAgreementAnswerUpdated", saIdRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreCoordinatorServiceAgreementAnswerUpdated)
				if err := _PreCoordinator.contract.UnpackLog(event, "ServiceAgreementAnswerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseServiceAgreementAnswerUpdated is a log parse operation binding the contract event 0xe991444bc589ce1a82e7cbe4e5ebaa8aaa2a5c44964bd32d2af07dd846a638ba.
//
// Solidity: event ServiceAgreementAnswerUpdated(bytes32 indexed saId, bytes32 indexed requestId, int256 answer)
func (_PreCoordinator *PreCoordinatorFilterer) ParseServiceAgreementAnswerUpdated(log types.Log) (*PreCoordinatorServiceAgreementAnswerUpdated, error) {
	event := new(PreCoordinatorServiceAgreementAnswerUpdated)
	if err := _PreCoordinator.contract.UnpackLog(event, "ServiceAgreementAnswerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreCoordinatorServiceAgreementDeletedIterator is returned from FilterServiceAgreementDeleted and is used to iterate over the raw logs and unpacked data for ServiceAgreementDeleted events raised by the PreCoordinator contract.
type PreCoordinatorServiceAgreementDeletedIterator struct {
	Event *PreCoordinatorServiceAgreementDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreCoordinatorServiceAgreementDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreCoordinatorServiceAgreementDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreCoordinatorServiceAgreementDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreCoordinatorServiceAgreementDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreCoordinatorServiceAgreementDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreCoordinatorServiceAgreementDeleted represents a ServiceAgreementDeleted event raised by the PreCoordinator contract.
type PreCoordinatorServiceAgreementDeleted struct {
	SaId [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterServiceAgreementDeleted is a free log retrieval operation binding the contract event 0x227c06e698a75d1029f6c20a48aca0d218abffbdf5ce0ebd117d2de93cfc6db2.
//
// Solidity: event ServiceAgreementDeleted(bytes32 indexed saId)
func (_PreCoordinator *PreCoordinatorFilterer) FilterServiceAgreementDeleted(opts *bind.FilterOpts, saId [][32]byte) (*PreCoordinatorServiceAgreementDeletedIterator, error) {

	var saIdRule []interface{}
	for _, saIdItem := range saId {
		saIdRule = append(saIdRule, saIdItem)
	}

	logs, sub, err := _PreCoordinator.contract.FilterLogs(opts, "ServiceAgreementDeleted", saIdRule)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorServiceAgreementDeletedIterator{contract: _PreCoordinator.contract, event: "ServiceAgreementDeleted", logs: logs, sub: sub}, nil
}

// WatchServiceAgreementDeleted is a free log subscription operation binding the contract event 0x227c06e698a75d1029f6c20a48aca0d218abffbdf5ce0ebd117d2de93cfc6db2.
//
// Solidity: event ServiceAgreementDeleted(bytes32 indexed saId)
func (_PreCoordinator *PreCoordinatorFilterer) WatchServiceAgreementDeleted(opts *bind.WatchOpts, sink chan<- *PreCoordinatorServiceAgreementDeleted, saId [][32]byte) (event.Subscription, error) {

	var saIdRule []interface{}
	for _, saIdItem := range saId {
		saIdRule = append(saIdRule, saIdItem)
	}

	logs, sub, err := _PreCoordinator.contract.WatchLogs(opts, "ServiceAgreementDeleted", saIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreCoordinatorServiceAgreementDeleted)
				if err := _PreCoordinator.contract.UnpackLog(event, "ServiceAgreementDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseServiceAgreementDeleted is a log parse operation binding the contract event 0x227c06e698a75d1029f6c20a48aca0d218abffbdf5ce0ebd117d2de93cfc6db2.
//
// Solidity: event ServiceAgreementDeleted(bytes32 indexed saId)
func (_PreCoordinator *PreCoordinatorFilterer) ParseServiceAgreementDeleted(log types.Log) (*PreCoordinatorServiceAgreementDeleted, error) {
	event := new(PreCoordinatorServiceAgreementDeleted)
	if err := _PreCoordinator.contract.UnpackLog(event, "ServiceAgreementDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreCoordinatorServiceAgreementRequestedIterator is returned from FilterServiceAgreementRequested and is used to iterate over the raw logs and unpacked data for ServiceAgreementRequested events raised by the PreCoordinator contract.
type PreCoordinatorServiceAgreementRequestedIterator struct {
	Event *PreCoordinatorServiceAgreementRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreCoordinatorServiceAgreementRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreCoordinatorServiceAgreementRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreCoordinatorServiceAgreementRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreCoordinatorServiceAgreementRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreCoordinatorServiceAgreementRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreCoordinatorServiceAgreementRequested represents a ServiceAgreementRequested event raised by the PreCoordinator contract.
type PreCoordinatorServiceAgreementRequested struct {
	SaId      [32]byte
	RequestId [32]byte
	Payment   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterServiceAgreementRequested is a free log retrieval operation binding the contract event 0x0d3e7811af83862cbc3778c66d787596cdb580e0dbc448d99f21c865770a8432.
//
// Solidity: event ServiceAgreementRequested(bytes32 indexed saId, bytes32 indexed requestId, uint256 payment)
func (_PreCoordinator *PreCoordinatorFilterer) FilterServiceAgreementRequested(opts *bind.FilterOpts, saId [][32]byte, requestId [][32]byte) (*PreCoordinatorServiceAgreementRequestedIterator, error) {

	var saIdRule []interface{}
	for _, saIdItem := range saId {
		saIdRule = append(saIdRule, saIdItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _PreCoordinator.contract.FilterLogs(opts, "ServiceAgreementRequested", saIdRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorServiceAgreementRequestedIterator{contract: _PreCoordinator.contract, event: "ServiceAgreementRequested", logs: logs, sub: sub}, nil
}

// WatchServiceAgreementRequested is a free log subscription operation binding the contract event 0x0d3e7811af83862cbc3778c66d787596cdb580e0dbc448d99f21c865770a8432.
//
// Solidity: event ServiceAgreementRequested(bytes32 indexed saId, bytes32 indexed requestId, uint256 payment)
func (_PreCoordinator *PreCoordinatorFilterer) WatchServiceAgreementRequested(opts *bind.WatchOpts, sink chan<- *PreCoordinatorServiceAgreementRequested, saId [][32]byte, requestId [][32]byte) (event.Subscription, error) {

	var saIdRule []interface{}
	for _, saIdItem := range saId {
		saIdRule = append(saIdRule, saIdItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _PreCoordinator.contract.WatchLogs(opts, "ServiceAgreementRequested", saIdRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreCoordinatorServiceAgreementRequested)
				if err := _PreCoordinator.contract.UnpackLog(event, "ServiceAgreementRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseServiceAgreementRequested is a log parse operation binding the contract event 0x0d3e7811af83862cbc3778c66d787596cdb580e0dbc448d99f21c865770a8432.
//
// Solidity: event ServiceAgreementRequested(bytes32 indexed saId, bytes32 indexed requestId, uint256 payment)
func (_PreCoordinator *PreCoordinatorFilterer) ParseServiceAgreementRequested(log types.Log) (*PreCoordinatorServiceAgreementRequested, error) {
	event := new(PreCoordinatorServiceAgreementRequested)
	if err := _PreCoordinator.contract.UnpackLog(event, "ServiceAgreementRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreCoordinatorServiceAgreementResponseReceivedIterator is returned from FilterServiceAgreementResponseReceived and is used to iterate over the raw logs and unpacked data for ServiceAgreementResponseReceived events raised by the PreCoordinator contract.
type PreCoordinatorServiceAgreementResponseReceivedIterator struct {
	Event *PreCoordinatorServiceAgreementResponseReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreCoordinatorServiceAgreementResponseReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreCoordinatorServiceAgreementResponseReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreCoordinatorServiceAgreementResponseReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreCoordinatorServiceAgreementResponseReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreCoordinatorServiceAgreementResponseReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreCoordinatorServiceAgreementResponseReceived represents a ServiceAgreementResponseReceived event raised by the PreCoordinator contract.
type PreCoordinatorServiceAgreementResponseReceived struct {
	SaId      [32]byte
	RequestId [32]byte
	Oracle    common.Address
	Answer    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterServiceAgreementResponseReceived is a free log retrieval operation binding the contract event 0x6bd4bffa5426494ba16814dba4b1994c92f88f7664ad231cf8aa811fff6e925e.
//
// Solidity: event ServiceAgreementResponseReceived(bytes32 indexed saId, bytes32 indexed requestId, address indexed oracle, int256 answer)
func (_PreCoordinator *PreCoordinatorFilterer) FilterServiceAgreementResponseReceived(opts *bind.FilterOpts, saId [][32]byte, requestId [][32]byte, oracle []common.Address) (*PreCoordinatorServiceAgreementResponseReceivedIterator, error) {

	var saIdRule []interface{}
	for _, saIdItem := range saId {
		saIdRule = append(saIdRule, saIdItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}
	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _PreCoordinator.contract.FilterLogs(opts, "ServiceAgreementResponseReceived", saIdRule, requestIdRule, oracleRule)
	if err != nil {
		return nil, err
	}
	return &PreCoordinatorServiceAgreementResponseReceivedIterator{contract: _PreCoordinator.contract, event: "ServiceAgreementResponseReceived", logs: logs, sub: sub}, nil
}

// WatchServiceAgreementResponseReceived is a free log subscription operation binding the contract event 0x6bd4bffa5426494ba16814dba4b1994c92f88f7664ad231cf8aa811fff6e925e.
//
// Solidity: event ServiceAgreementResponseReceived(bytes32 indexed saId, bytes32 indexed requestId, address indexed oracle, int256 answer)
func (_PreCoordinator *PreCoordinatorFilterer) WatchServiceAgreementResponseReceived(opts *bind.WatchOpts, sink chan<- *PreCoordinatorServiceAgreementResponseReceived, saId [][32]byte, requestId [][32]byte, oracle []common.Address) (event.Subscription, error) {

	var saIdRule []interface{}
	for _, saIdItem := range saId {
		saIdRule = append(saIdRule, saIdItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}
	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _PreCoordinator.contract.WatchLogs(opts, "ServiceAgreementResponseReceived", saIdRule, requestIdRule, oracleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreCoordinatorServiceAgreementResponseReceived)
				if err := _PreCoordinator.contract.UnpackLog(event, "ServiceAgreementResponseReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseServiceAgreementResponseReceived is a log parse operation binding the contract event 0x6bd4bffa5426494ba16814dba4b1994c92f88f7664ad231cf8aa811fff6e925e.
//
// Solidity: event ServiceAgreementResponseReceived(bytes32 indexed saId, bytes32 indexed requestId, address indexed oracle, int256 answer)
func (_PreCoordinator *PreCoordinatorFilterer) ParseServiceAgreementResponseReceived(log types.Log) (*PreCoordinatorServiceAgreementResponseReceived, error) {
	event := new(PreCoordinatorServiceAgreementResponseReceived)
	if err := _PreCoordinator.contract.UnpackLog(event, "ServiceAgreementResponseReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
